(()=>{"use strict";var __webpack_modules__={594:()=>{eval("\n;// CONCATENATED MODULE: ./src/modules/services.js\nconst fetchData = async (url, method, data) => {\r\n  let res;\r\n\r\n  if (method == 'POST') {\r\n    res = await fetch(url, {\r\n      method: method,\r\n      body: data,\r\n      headers: { 'Content-type': 'application/json' },\r\n    });\r\n  } else {\r\n    res = await fetch(url);\r\n  }\r\n\r\n  if (!res.ok) throw new Error(`Ошибка запроса по адресу ${url}, статус: ${res.status}`);\r\n\r\n  return await res.json();\r\n};\r\n\r\nconst clearLS = () => {\r\n  if (!localStorage.getItem('user777')) {\r\n    localStorage.clear();\r\n    localStorage.setItem('user777', 'hello!');\r\n  }\r\n};\r\n\n;// CONCATENATED MODULE: ./src/modules/tabs.js\nconst tabs = (content, tab) => {\r\n  const tabcontents = document.querySelectorAll(content);\r\n  const tabs = document.querySelectorAll(tab);\r\n\r\n  const hideContent = () => {\r\n    tabcontents.forEach((content) => content.classList.remove('active', 'fade'));\r\n    tabs.forEach((tab) => tab.classList.remove('active'));\r\n  };\r\n\r\n  const showContent = (i) => {\r\n    tabcontents[i].classList.add('active', 'fade');\r\n    tabs[i].classList.add('active');\r\n  };\r\n\r\n  tabs.forEach((tab, i) => {\r\n    tab.addEventListener('click', () => {\r\n      hideContent();\r\n      showContent(i);\r\n    });\r\n  });\r\n};\r\n\n;// CONCATENATED MODULE: ./src/modules/slider.js\nconst slider = (sliderEl, slide, prevBtn, nextBtn, curSlide, totalSlides) => {\r\n  const slider = document.querySelector(sliderEl);\r\n  const slides = slider.querySelectorAll(slide);\r\n  const btnPrev = slider.querySelector(prevBtn);\r\n  const btnNext = slider.querySelector(nextBtn);\r\n  const current = slider.querySelector(curSlide);\r\n  const total = slider.querySelector(totalSlides);\r\n\r\n  let ind = 0;\r\n\r\n  const normalizeNum = (num) => (num < 10 ? `0${num}` : num);\r\n\r\n  total.textContent = normalizeNum(slides.length);\r\n  current.textContent = normalizeNum(ind + 1);\r\n\r\n  const controls = document.createElement('div');\r\n  controls.classList.add('slider-controls');\r\n  slider.append(controls);\r\n\r\n  for (let i = 0; i < slides.length; i++) {\r\n    const dot = document.createElement('div');\r\n    dot.classList.add('slider-dot');\r\n    if (i == ind) dot.classList.add('active');\r\n    controls.append(dot);\r\n  }\r\n\r\n  const dots = controls.querySelectorAll('.slider-dot');\r\n\r\n  const hideSlide = (direction) => {\r\n    slider.classList.add('lock');\r\n    slides[ind].classList.add(direction);\r\n\r\n    const deactivateSlide = (e) => e.target.classList.remove('active', direction);\r\n    slides[ind].addEventListener('animationend', (e) => deactivateSlide(e), { once: true });\r\n  };\r\n\r\n  const showSlide = (direction) => {\r\n    current.textContent = normalizeNum(ind + 1);\r\n    controls.querySelector('.slider-dot.active').classList.remove('active');\r\n    dots[ind].classList.add('active');\r\n\r\n    slides[ind].classList.add('next', direction);\r\n\r\n    const activateSlide = (e) => {\r\n      e.target.classList.remove('next', direction);\r\n      e.target.classList.add('active');\r\n      slider.classList.remove('lock');\r\n    };\r\n\r\n    slides[ind].addEventListener('animationend', (e) => activateSlide(e), { once: true });\r\n  };\r\n\r\n  const showLeftSlide = (i) => {\r\n    hideSlide('to-right');\r\n    i || i == 0 ? (ind = i) : (ind = (ind - 1 + slides.length) % slides.length);\r\n    showSlide('from-left');\r\n  };\r\n\r\n  const showRightSlide = (i) => {\r\n    hideSlide('to-left');\r\n    i || i == 0 ? (ind = i) : (ind = (ind + 1) % slides.length);\r\n    showSlide('from-right');\r\n  };\r\n\r\n  btnPrev.addEventListener('click', () => showLeftSlide());\r\n  btnNext.addEventListener('click', () => showRightSlide());\r\n\r\n  dots.forEach((dot, i) => {\r\n    dot.addEventListener('click', () => (i < ind ? showLeftSlide(i) : showRightSlide(i)));\r\n  });\r\n\r\n  let sliderTimerId = setInterval(() => showRightSlide(), 2500);\r\n\r\n  slider.addEventListener('pointerover', () => clearInterval(sliderTimerId));\r\n  slider.addEventListener('pointerout', () => (sliderTimerId = setInterval(() => showRightSlide(), 2500)));\r\n\r\n  // ----------------------------------------------------\r\n\r\n  const swipeSlides = () => {\r\n    const surface = slider.querySelector('.offer__slider-wrapper');\r\n\r\n    let startX, startY, distX, distY, startTime, elapsedTime;\r\n    const minDistX = 50;\r\n    const maxDistY = 100;\r\n    const maxTime = 300;\r\n\r\n    const startActions = (e) => {\r\n      if (e.type == 'mousedown') e.preventDefault();\r\n      if (e.type == 'touchstart') e = e.changedTouches[0];\r\n\r\n      startX = e.pageX;\r\n      startY = e.pageY;\r\n      startTime = new Date().getTime();\r\n    };\r\n\r\n    const endActions = (e) => {\r\n      if (e.type == 'mouseup') e.preventDefault();\r\n      if (e.type == 'touchend') e = e.changedTouches[0];\r\n\r\n      distX = e.pageX - startX;\r\n      distY = e.pageY - startY;\r\n      elapsedTime = new Date().getTime() - startTime;\r\n\r\n      if (elapsedTime <= maxTime && Math.abs(distX) >= minDistX && Math.abs(distY) <= maxDistY) {\r\n        distX > 0 ? showLeftSlide() : showRightSlide();\r\n      }\r\n    };\r\n\r\n    surface.addEventListener('mousedown', (e) => startActions(e));\r\n    surface.addEventListener('mouseup', (e) => endActions(e));\r\n\r\n    surface.addEventListener('touchstart', (e) => startActions(e));\r\n    surface.addEventListener('touchend', (e) => endActions(e));\r\n  };\r\n\r\n  swipeSlides();\r\n};\r\n\n;// CONCATENATED MODULE: ./src/modules/Modal.js\nconst scrollBar = window.innerWidth - document.documentElement.offsetWidth;\r\n\r\nclass Modal {\r\n  constructor(modal, closeBtn, openBtns) {\r\n    this.modal = document.querySelector(modal);\r\n    this.closeBtn = document.querySelector(closeBtn);\r\n    this.openBtns = document.querySelectorAll(openBtns);\r\n    this.openTimeout;\r\n    this.closeTimeout;\r\n    this.modalHandlers();\r\n  }\r\n\r\n  openModal() {\r\n    this.modal.classList.add('active');\r\n    document.body.style.cssText = `overflow: hidden; padding-right: ${scrollBar}px`;\r\n    if (this.closeTimeout) this.closeTimeout();\r\n    if (this.openTimeout) clearTimeout(this.openTimeout);\r\n  }\r\n\r\n  closeModal() {\r\n    this.modal.classList.remove('active');\r\n    document.body.style = '';\r\n    if (this.closeTimeout) clearTimeout(this.closeTimeout);\r\n  }\r\n\r\n  modalHandlers() {\r\n    this.openBtns.forEach((btn) => btn.addEventListener('click', () => this.openModal()));\r\n\r\n    this.modal.addEventListener('click', (e) => {\r\n      if (e.target === this.modal || e.target === this.closeBtn) this.closeModal();\r\n    });\r\n\r\n    document.addEventListener('keydown', (e) => {\r\n      if (e.code === 'Escape' && this.modal.classList.contains('active')) this.closeModal();\r\n    });\r\n  }\r\n\r\n  scrollHandler() {\r\n    const openModalOnScroll = () => {\r\n      if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight) this.openModal();\r\n    };\r\n    window.addEventListener('scroll', openModalOnScroll, { once: true });\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/modules/contact.js\n\r\n\r\n\r\nconst contact = () => {\r\n  const modal = new Modal('.modal', '.modal__close', '[data-modal]');\r\n  // modal.openTimeout = setTimeout(() => modal.openModal(), 3000);\r\n  modal.scrollHandler();\r\n\r\n  const thanksModal = new Modal('.thanks-modal', '.modal__close');\r\n  thanksModal.closeTimeout = () => setTimeout(() => thanksModal.closeModal(), 3000);\r\n\r\n  const forms = document.querySelectorAll('form');\r\n\r\n  const message = {\r\n    success: 'Спасибо! Мы скоро с вами свяжемся',\r\n    failure: 'Что-то пошло не так...',\r\n  };\r\n\r\n  const showThanksModal = (message) => {\r\n    modal.closeModal();\r\n    thanksModal.modal.querySelector('.modal__title').textContent = message;\r\n    thanksModal.openModal();\r\n  };\r\n\r\n  const postData = (form) => {\r\n    form.addEventListener('submit', (e) => {\r\n      e.preventDefault();\r\n\r\n      const spinner = form.querySelector('.spinner');\r\n      spinner.classList.add('active');\r\n\r\n      const formData = new FormData(form);\r\n      const jsonData = JSON.stringify(Object.fromEntries(formData.entries()));\r\n\r\n      fetchData('https://jsonplaceholder.typicode.com/posts', 'POST', jsonData)\r\n        .then((data) => {\r\n          console.log(data);\r\n          showThanksModal(message.success);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.message);\r\n          showThanksModal(message.failure);\r\n        })\r\n        .finally(() => {\r\n          form.reset();\r\n          spinner.classList.remove('active');\r\n        });\r\n    });\r\n  };\r\n\r\n  forms.forEach((form) => postData(form));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/modules/calc.js\nconst calc = () => {\n  const calcField = document.querySelector('.calculating__field');\n  const inputs = calcField.querySelectorAll('input');\n  const result = calcField.querySelector('.calculating__result > span');\n\n  const ratio = { low: 1.2, small: 1.375, medium: 1.55, high: 1.725 };\n  const reg = /^[1-9]\\d*|\\d+\\.(\\d{1,2})$/;\n\n  let user = { gender: 'female', level: 'small' };\n\n  const getResult = () => {\n    const { gender, height, weight, age, level } = user;\n\n    if (weight && height && age && !calcField.querySelector('.attention')) {\n      gender == 'female'\n        ? (result.textContent = Math.round((447.6 + 9.2 * weight + 3.1 * height - 4.3 * age) * ratio[level]))\n        : (result.textContent = Math.round((88.36 + 13.4 * weight + 4.8 * height - 5.7 * age) * ratio[level]));\n\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n  };\n\n  if (localStorage.getItem('user')) {\n    user = JSON.parse(localStorage.getItem('user'));\n    inputs.forEach((input) => (input.value = user[input.id]));\n    getResult();\n  }\n\n  calcField.querySelector(`[data-gender=\"${user.gender}\"]`).classList.add('active');\n  calcField.querySelector(`[data-level=\"${user.level}\"]`).classList.add('active');\n\n  calcField.addEventListener('click', (e) => {\n    const btn = e.target;\n    if (btn.dataset.gender || btn.dataset.level) {\n      btn.dataset.gender ? (user.gender = btn.dataset.gender) : (user.level = btn.dataset.level);\n      btn.parentElement.querySelector('.active').classList.remove('active');\n      btn.classList.add('active');\n      getResult();\n    }\n  });\n\n  inputs.forEach((input) => {\n    input.addEventListener('input', () => {\n      if (input.value.match(reg) && +input.value < 300) {\n        input.classList.remove('attention');\n        user[input.id] = +input.value;\n        getResult();\n      } else {\n        input.classList.add('attention');\n        result.textContent = '____';\n      }\n    });\n  });\n};\n\n;// CONCATENATED MODULE: ./src/modules/cards.js\n\r\n\r\nclass MenuCard {\r\n  constructor(src, alt, title, descr, price, parentSelector, ...classes) {\r\n    this.src = src;\r\n    this.alt = alt;\r\n    this.title = title;\r\n    this.descr = descr;\r\n    this.price = price;\r\n    this.container = document.querySelector(parentSelector);\r\n    this.classes = classes;\r\n    this.rate = 70;\r\n    this.changeToRub();\r\n  }\r\n\r\n  changeToRub() {\r\n    this.price = +this.price * this.rate;\r\n  }\r\n\r\n  render() {\r\n    const card = document.createElement('div');\r\n\r\n    this.classes.length ? card.classList.add(...this.classes) : card.classList.add('menu__item');\r\n\r\n    card.innerHTML = `\r\n      <img src=${this.src} alt=${this.alt} />\r\n        <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n        <div class=\"menu__item-descr\">${this.descr}</div>\r\n        <div class=\"menu__item-divider\"></div>\r\n        <div class=\"menu__item-price\">\r\n          <div class=\"menu__item-cost\">Цена:</div>\r\n          <div class=\"menu__item-total\"><span>${this.price}</span> руб/день</div>\r\n        </div>\r\n    `;\r\n\r\n    this.container.append(card);\r\n  }\r\n}\r\n\r\nconst cards = () => {\r\n  fetchData('./db.json')\r\n    .then((data) => {\r\n      data.menu.forEach(({ img, altimg, title, descr, price }) => {\r\n        new MenuCard(img, altimg, title, descr, price, '.menu .container').render();\r\n      });\r\n    })\r\n    .catch((err) => console.error(err.message));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/modules/timer.js\nconst timer = (timerEl, deadline, endDay, endMonth) => {\r\n  const timeBoxes = document.querySelectorAll(`${timerEl} span`);\r\n\r\n  deadline = new Date(`${deadline}T00:00:00`);\r\n\r\n  const updateDeadline = () => {\r\n    if (deadline - Date.now() <= 0) {\r\n      const msecPerWeek = 1000 * 60 * 60 * 24 * 7;\r\n      const passedTime = (Date.now() - deadline) % msecPerWeek; // прошедшее время с начала новой недели\r\n      deadline = new Date(Date.now() - passedTime + msecPerWeek); // дедлайн обновляется каждую неделю на 1 неделю вперед\r\n    }\r\n  };\r\n\r\n  const updateDeadlineText = () => {\r\n    const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];\r\n\r\n    document.querySelector(endDay).textContent = deadline.getDate();\r\n    document.querySelector(endMonth).textContent = months[deadline.getMonth()];\r\n  };\r\n\r\n  const getTimeRemaining = () => {\r\n    const msec = deadline - Date.now();\r\n\r\n    const days = Math.floor(msec / (1000 * 60 * 60 * 24));\r\n    const hours = Math.floor((msec / (1000 * 60 * 60)) % 24);\r\n    const minutes = Math.floor((msec / (1000 * 60)) % 60);\r\n    const seconds = Math.floor((msec / 1000) % 60);\r\n\r\n    return msec > 0 ? [days, hours, minutes, seconds, msec] : [0, 0, 0, 0, 0];\r\n  };\r\n\r\n  const normalizeNum = (num) => (num < 10 ? `0${num}` : num);\r\n\r\n  const normalizeWord = (num) => {\r\n    if (num % 10 === 1 && num !== 11) {\r\n      return ['день', 'час', 'минута', 'секунда'];\r\n    } else if ((num % 10 === 2 && num !== 12) || (num % 10 === 3 && num !== 13) || (num % 10 === 4 && num !== 14)) {\r\n      return ['дня', 'часа', 'минуты', 'секунды'];\r\n    } else {\r\n      return ['дней', 'часов', 'минут', 'секунд'];\r\n    }\r\n  };\r\n\r\n  const setTimer = () => {\r\n    const timerId = setInterval(updateTimer, 1000);\r\n    updateTimer();\r\n\r\n    function updateTimer() {\r\n      const timeRem = getTimeRemaining();\r\n      if (timeRem[4] <= 1000) clearInterval(timerId);\r\n\r\n      timeBoxes.forEach((timeBox, i) => {\r\n        timeBox.textContent = normalizeNum(timeRem[i]);\r\n        timeBox.nextSibling.textContent = normalizeWord(timeRem[i])[i];\r\n      });\r\n    }\r\n  };\r\n\r\n  updateDeadline();\r\n  updateDeadlineText();\r\n  setTimer();\r\n};\r\n\n;// CONCATENATED MODULE: ./src/index.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclearLS();\r\ntabs('.tabcontent', '.tabheader__item');\r\nslider('.offer__slider', '.offer__slide', '.offer__slider-prev', '.offer__slider-next', '#current', '#total');\r\ncontact();\r\ncalc();\r\ncards();\r\ntimer('.timer', '2022-08-08', '#end-day', '#end-month');\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFBSTtBQUNKLEtBQUs7QUFDTCxLQUFLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZC10cmFpbmluZ2pzLy4vc3JjL21vZHVsZXMvc2VydmljZXMuanM/ZDk0MiIsIndlYnBhY2s6Ly9mb29kLXRyYWluaW5nanMvLi9zcmMvbW9kdWxlcy90YWJzLmpzP2I3YjIiLCJ3ZWJwYWNrOi8vZm9vZC10cmFpbmluZ2pzLy4vc3JjL21vZHVsZXMvc2xpZGVyLmpzP2FhZWEiLCJ3ZWJwYWNrOi8vZm9vZC10cmFpbmluZ2pzLy4vc3JjL21vZHVsZXMvTW9kYWwuanM/ODA3YyIsIndlYnBhY2s6Ly9mb29kLXRyYWluaW5nanMvLi9zcmMvbW9kdWxlcy9jb250YWN0LmpzPzFhMWMiLCJ3ZWJwYWNrOi8vZm9vZC10cmFpbmluZ2pzLy4vc3JjL21vZHVsZXMvY2FsYy5qcz8wM2RkIiwid2VicGFjazovL2Zvb2QtdHJhaW5pbmdqcy8uL3NyYy9tb2R1bGVzL2NhcmRzLmpzP2QwMTAiLCJ3ZWJwYWNrOi8vZm9vZC10cmFpbmluZ2pzLy4vc3JjL21vZHVsZXMvdGltZXIuanM/OGUwNSIsIndlYnBhY2s6Ly9mb29kLXRyYWluaW5nanMvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZmV0Y2hEYXRhID0gYXN5bmMgKHVybCwgbWV0aG9kLCBkYXRhKSA9PiB7XHJcbiAgbGV0IHJlcztcclxuXHJcbiAgaWYgKG1ldGhvZCA9PSAnUE9TVCcpIHtcclxuICAgIHJlcyA9IGF3YWl0IGZldGNoKHVybCwge1xyXG4gICAgICBtZXRob2Q6IG1ldGhvZCxcclxuICAgICAgYm9keTogZGF0YSxcclxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmVzID0gYXdhaXQgZmV0Y2godXJsKTtcclxuICB9XHJcblxyXG4gIGlmICghcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IoYNCe0YjQuNCx0LrQsCDQt9Cw0L/RgNC+0YHQsCDQv9C+INCw0LTRgNC10YHRgyAke3VybH0sINGB0YLQsNGC0YPRgTogJHtyZXMuc3RhdHVzfWApO1xyXG5cclxuICByZXR1cm4gYXdhaXQgcmVzLmpzb24oKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjbGVhckxTID0gKCkgPT4ge1xyXG4gIGlmICghbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXI3NzcnKSkge1xyXG4gICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcjc3NycsICdoZWxsbyEnKTtcclxuICB9XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCB0YWJzID0gKGNvbnRlbnQsIHRhYikgPT4ge1xyXG4gIGNvbnN0IHRhYmNvbnRlbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjb250ZW50KTtcclxuICBjb25zdCB0YWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YWIpO1xyXG5cclxuICBjb25zdCBoaWRlQ29udGVudCA9ICgpID0+IHtcclxuICAgIHRhYmNvbnRlbnRzLmZvckVhY2goKGNvbnRlbnQpID0+IGNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJywgJ2ZhZGUnKSk7XHJcbiAgICB0YWJzLmZvckVhY2goKHRhYikgPT4gdGFiLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBzaG93Q29udGVudCA9IChpKSA9PiB7XHJcbiAgICB0YWJjb250ZW50c1tpXS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnLCAnZmFkZScpO1xyXG4gICAgdGFic1tpXS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICB9O1xyXG5cclxuICB0YWJzLmZvckVhY2goKHRhYiwgaSkgPT4ge1xyXG4gICAgdGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBoaWRlQ29udGVudCgpO1xyXG4gICAgICBzaG93Q29udGVudChpKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59O1xyXG4iLCJleHBvcnQgY29uc3Qgc2xpZGVyID0gKHNsaWRlckVsLCBzbGlkZSwgcHJldkJ0biwgbmV4dEJ0biwgY3VyU2xpZGUsIHRvdGFsU2xpZGVzKSA9PiB7XHJcbiAgY29uc3Qgc2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzbGlkZXJFbCk7XHJcbiAgY29uc3Qgc2xpZGVzID0gc2xpZGVyLnF1ZXJ5U2VsZWN0b3JBbGwoc2xpZGUpO1xyXG4gIGNvbnN0IGJ0blByZXYgPSBzbGlkZXIucXVlcnlTZWxlY3RvcihwcmV2QnRuKTtcclxuICBjb25zdCBidG5OZXh0ID0gc2xpZGVyLnF1ZXJ5U2VsZWN0b3IobmV4dEJ0bik7XHJcbiAgY29uc3QgY3VycmVudCA9IHNsaWRlci5xdWVyeVNlbGVjdG9yKGN1clNsaWRlKTtcclxuICBjb25zdCB0b3RhbCA9IHNsaWRlci5xdWVyeVNlbGVjdG9yKHRvdGFsU2xpZGVzKTtcclxuXHJcbiAgbGV0IGluZCA9IDA7XHJcblxyXG4gIGNvbnN0IG5vcm1hbGl6ZU51bSA9IChudW0pID0+IChudW0gPCAxMCA/IGAwJHtudW19YCA6IG51bSk7XHJcblxyXG4gIHRvdGFsLnRleHRDb250ZW50ID0gbm9ybWFsaXplTnVtKHNsaWRlcy5sZW5ndGgpO1xyXG4gIGN1cnJlbnQudGV4dENvbnRlbnQgPSBub3JtYWxpemVOdW0oaW5kICsgMSk7XHJcblxyXG4gIGNvbnN0IGNvbnRyb2xzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgY29udHJvbHMuY2xhc3NMaXN0LmFkZCgnc2xpZGVyLWNvbnRyb2xzJyk7XHJcbiAgc2xpZGVyLmFwcGVuZChjb250cm9scyk7XHJcblxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCBkb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGRvdC5jbGFzc0xpc3QuYWRkKCdzbGlkZXItZG90Jyk7XHJcbiAgICBpZiAoaSA9PSBpbmQpIGRvdC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgIGNvbnRyb2xzLmFwcGVuZChkb3QpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZG90cyA9IGNvbnRyb2xzLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZXItZG90Jyk7XHJcblxyXG4gIGNvbnN0IGhpZGVTbGlkZSA9IChkaXJlY3Rpb24pID0+IHtcclxuICAgIHNsaWRlci5jbGFzc0xpc3QuYWRkKCdsb2NrJyk7XHJcbiAgICBzbGlkZXNbaW5kXS5jbGFzc0xpc3QuYWRkKGRpcmVjdGlvbik7XHJcblxyXG4gICAgY29uc3QgZGVhY3RpdmF0ZVNsaWRlID0gKGUpID0+IGUudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScsIGRpcmVjdGlvbik7XHJcbiAgICBzbGlkZXNbaW5kXS5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCAoZSkgPT4gZGVhY3RpdmF0ZVNsaWRlKGUpLCB7IG9uY2U6IHRydWUgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2hvd1NsaWRlID0gKGRpcmVjdGlvbikgPT4ge1xyXG4gICAgY3VycmVudC50ZXh0Q29udGVudCA9IG5vcm1hbGl6ZU51bShpbmQgKyAxKTtcclxuICAgIGNvbnRyb2xzLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItZG90LmFjdGl2ZScpLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG4gICAgZG90c1tpbmRdLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG5cclxuICAgIHNsaWRlc1tpbmRdLmNsYXNzTGlzdC5hZGQoJ25leHQnLCBkaXJlY3Rpb24pO1xyXG5cclxuICAgIGNvbnN0IGFjdGl2YXRlU2xpZGUgPSAoZSkgPT4ge1xyXG4gICAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCduZXh0JywgZGlyZWN0aW9uKTtcclxuICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgIHNsaWRlci5jbGFzc0xpc3QucmVtb3ZlKCdsb2NrJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNsaWRlc1tpbmRdLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIChlKSA9PiBhY3RpdmF0ZVNsaWRlKGUpLCB7IG9uY2U6IHRydWUgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2hvd0xlZnRTbGlkZSA9IChpKSA9PiB7XHJcbiAgICBoaWRlU2xpZGUoJ3RvLXJpZ2h0Jyk7XHJcbiAgICBpIHx8IGkgPT0gMCA/IChpbmQgPSBpKSA6IChpbmQgPSAoaW5kIC0gMSArIHNsaWRlcy5sZW5ndGgpICUgc2xpZGVzLmxlbmd0aCk7XHJcbiAgICBzaG93U2xpZGUoJ2Zyb20tbGVmdCcpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNob3dSaWdodFNsaWRlID0gKGkpID0+IHtcclxuICAgIGhpZGVTbGlkZSgndG8tbGVmdCcpO1xyXG4gICAgaSB8fCBpID09IDAgPyAoaW5kID0gaSkgOiAoaW5kID0gKGluZCArIDEpICUgc2xpZGVzLmxlbmd0aCk7XHJcbiAgICBzaG93U2xpZGUoJ2Zyb20tcmlnaHQnKTtcclxuICB9O1xyXG5cclxuICBidG5QcmV2LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2hvd0xlZnRTbGlkZSgpKTtcclxuICBidG5OZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2hvd1JpZ2h0U2xpZGUoKSk7XHJcblxyXG4gIGRvdHMuZm9yRWFjaCgoZG90LCBpKSA9PiB7XHJcbiAgICBkb3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiAoaSA8IGluZCA/IHNob3dMZWZ0U2xpZGUoaSkgOiBzaG93UmlnaHRTbGlkZShpKSkpO1xyXG4gIH0pO1xyXG5cclxuICBsZXQgc2xpZGVyVGltZXJJZCA9IHNldEludGVydmFsKCgpID0+IHNob3dSaWdodFNsaWRlKCksIDI1MDApO1xyXG5cclxuICBzbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm92ZXInLCAoKSA9PiBjbGVhckludGVydmFsKHNsaWRlclRpbWVySWQpKTtcclxuICBzbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm91dCcsICgpID0+IChzbGlkZXJUaW1lcklkID0gc2V0SW50ZXJ2YWwoKCkgPT4gc2hvd1JpZ2h0U2xpZGUoKSwgMjUwMCkpKTtcclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICBjb25zdCBzd2lwZVNsaWRlcyA9ICgpID0+IHtcclxuICAgIGNvbnN0IHN1cmZhY2UgPSBzbGlkZXIucXVlcnlTZWxlY3RvcignLm9mZmVyX19zbGlkZXItd3JhcHBlcicpO1xyXG5cclxuICAgIGxldCBzdGFydFgsIHN0YXJ0WSwgZGlzdFgsIGRpc3RZLCBzdGFydFRpbWUsIGVsYXBzZWRUaW1lO1xyXG4gICAgY29uc3QgbWluRGlzdFggPSA1MDtcclxuICAgIGNvbnN0IG1heERpc3RZID0gMTAwO1xyXG4gICAgY29uc3QgbWF4VGltZSA9IDMwMDtcclxuXHJcbiAgICBjb25zdCBzdGFydEFjdGlvbnMgPSAoZSkgPT4ge1xyXG4gICAgICBpZiAoZS50eXBlID09ICdtb3VzZWRvd24nKSBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGlmIChlLnR5cGUgPT0gJ3RvdWNoc3RhcnQnKSBlID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcclxuXHJcbiAgICAgIHN0YXJ0WCA9IGUucGFnZVg7XHJcbiAgICAgIHN0YXJ0WSA9IGUucGFnZVk7XHJcbiAgICAgIHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBlbmRBY3Rpb25zID0gKGUpID0+IHtcclxuICAgICAgaWYgKGUudHlwZSA9PSAnbW91c2V1cCcpIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgaWYgKGUudHlwZSA9PSAndG91Y2hlbmQnKSBlID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcclxuXHJcbiAgICAgIGRpc3RYID0gZS5wYWdlWCAtIHN0YXJ0WDtcclxuICAgICAgZGlzdFkgPSBlLnBhZ2VZIC0gc3RhcnRZO1xyXG4gICAgICBlbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lO1xyXG5cclxuICAgICAgaWYgKGVsYXBzZWRUaW1lIDw9IG1heFRpbWUgJiYgTWF0aC5hYnMoZGlzdFgpID49IG1pbkRpc3RYICYmIE1hdGguYWJzKGRpc3RZKSA8PSBtYXhEaXN0WSkge1xyXG4gICAgICAgIGRpc3RYID4gMCA/IHNob3dMZWZ0U2xpZGUoKSA6IHNob3dSaWdodFNsaWRlKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgc3VyZmFjZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoZSkgPT4gc3RhcnRBY3Rpb25zKGUpKTtcclxuICAgIHN1cmZhY2UuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIChlKSA9PiBlbmRBY3Rpb25zKGUpKTtcclxuXHJcbiAgICBzdXJmYWNlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCAoZSkgPT4gc3RhcnRBY3Rpb25zKGUpKTtcclxuICAgIHN1cmZhY2UuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoZSkgPT4gZW5kQWN0aW9ucyhlKSk7XHJcbiAgfTtcclxuXHJcbiAgc3dpcGVTbGlkZXMoKTtcclxufTtcclxuIiwiY29uc3Qgc2Nyb2xsQmFyID0gd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcblxyXG5leHBvcnQgY2xhc3MgTW9kYWwge1xyXG4gIGNvbnN0cnVjdG9yKG1vZGFsLCBjbG9zZUJ0biwgb3BlbkJ0bnMpIHtcclxuICAgIHRoaXMubW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1vZGFsKTtcclxuICAgIHRoaXMuY2xvc2VCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNsb3NlQnRuKTtcclxuICAgIHRoaXMub3BlbkJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKG9wZW5CdG5zKTtcclxuICAgIHRoaXMub3BlblRpbWVvdXQ7XHJcbiAgICB0aGlzLmNsb3NlVGltZW91dDtcclxuICAgIHRoaXMubW9kYWxIYW5kbGVycygpO1xyXG4gIH1cclxuXHJcbiAgb3Blbk1vZGFsKCkge1xyXG4gICAgdGhpcy5tb2RhbC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3NzVGV4dCA9IGBvdmVyZmxvdzogaGlkZGVuOyBwYWRkaW5nLXJpZ2h0OiAke3Njcm9sbEJhcn1weGA7XHJcbiAgICBpZiAodGhpcy5jbG9zZVRpbWVvdXQpIHRoaXMuY2xvc2VUaW1lb3V0KCk7XHJcbiAgICBpZiAodGhpcy5vcGVuVGltZW91dCkgY2xlYXJUaW1lb3V0KHRoaXMub3BlblRpbWVvdXQpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2VNb2RhbCgpIHtcclxuICAgIHRoaXMubW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlID0gJyc7XHJcbiAgICBpZiAodGhpcy5jbG9zZVRpbWVvdXQpIGNsZWFyVGltZW91dCh0aGlzLmNsb3NlVGltZW91dCk7XHJcbiAgfVxyXG5cclxuICBtb2RhbEhhbmRsZXJzKCkge1xyXG4gICAgdGhpcy5vcGVuQnRucy5mb3JFYWNoKChidG4pID0+IGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMub3Blbk1vZGFsKCkpKTtcclxuXHJcbiAgICB0aGlzLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzLm1vZGFsIHx8IGUudGFyZ2V0ID09PSB0aGlzLmNsb3NlQnRuKSB0aGlzLmNsb3NlTW9kYWwoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xyXG4gICAgICBpZiAoZS5jb2RlID09PSAnRXNjYXBlJyAmJiB0aGlzLm1vZGFsLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHRoaXMuY2xvc2VNb2RhbCgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzY3JvbGxIYW5kbGVyKCkge1xyXG4gICAgY29uc3Qgb3Blbk1vZGFsT25TY3JvbGwgPSAoKSA9PiB7XHJcbiAgICAgIGlmICh3aW5kb3cuc2Nyb2xsWSArIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgPj0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCkgdGhpcy5vcGVuTW9kYWwoKTtcclxuICAgIH07XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb3Blbk1vZGFsT25TY3JvbGwsIHsgb25jZTogdHJ1ZSB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTW9kYWwgfSBmcm9tICcuL01vZGFsJztcclxuaW1wb3J0IHsgZmV0Y2hEYXRhIH0gZnJvbSAnLi9zZXJ2aWNlcyc7XHJcblxyXG5leHBvcnQgY29uc3QgY29udGFjdCA9ICgpID0+IHtcclxuICBjb25zdCBtb2RhbCA9IG5ldyBNb2RhbCgnLm1vZGFsJywgJy5tb2RhbF9fY2xvc2UnLCAnW2RhdGEtbW9kYWxdJyk7XHJcbiAgLy8gbW9kYWwub3BlblRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IG1vZGFsLm9wZW5Nb2RhbCgpLCAzMDAwKTtcclxuICBtb2RhbC5zY3JvbGxIYW5kbGVyKCk7XHJcblxyXG4gIGNvbnN0IHRoYW5rc01vZGFsID0gbmV3IE1vZGFsKCcudGhhbmtzLW1vZGFsJywgJy5tb2RhbF9fY2xvc2UnKTtcclxuICB0aGFua3NNb2RhbC5jbG9zZVRpbWVvdXQgPSAoKSA9PiBzZXRUaW1lb3V0KCgpID0+IHRoYW5rc01vZGFsLmNsb3NlTW9kYWwoKSwgMzAwMCk7XHJcblxyXG4gIGNvbnN0IGZvcm1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZm9ybScpO1xyXG5cclxuICBjb25zdCBtZXNzYWdlID0ge1xyXG4gICAgc3VjY2VzczogJ9Ch0L/QsNGB0LjQsdC+ISDQnNGLINGB0LrQvtGA0L4g0YEg0LLQsNC80Lgg0YHQstGP0LbQtdC80YHRjycsXHJcbiAgICBmYWlsdXJlOiAn0KfRgtC+LdGC0L4g0L/QvtGI0LvQviDQvdC1INGC0LDQui4uLicsXHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2hvd1RoYW5rc01vZGFsID0gKG1lc3NhZ2UpID0+IHtcclxuICAgIG1vZGFsLmNsb3NlTW9kYWwoKTtcclxuICAgIHRoYW5rc01vZGFsLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fdGl0bGUnKS50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XHJcbiAgICB0aGFua3NNb2RhbC5vcGVuTW9kYWwoKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBwb3N0RGF0YSA9IChmb3JtKSA9PiB7XHJcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgIGNvbnN0IHNwaW5uZXIgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5zcGlubmVyJyk7XHJcbiAgICAgIHNwaW5uZXIuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcblxyXG4gICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKTtcclxuICAgICAgY29uc3QganNvbkRhdGEgPSBKU09OLnN0cmluZ2lmeShPYmplY3QuZnJvbUVudHJpZXMoZm9ybURhdGEuZW50cmllcygpKSk7XHJcblxyXG4gICAgICBmZXRjaERhdGEoJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cycsICdQT1NUJywganNvbkRhdGEpXHJcbiAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgICAgc2hvd1RoYW5rc01vZGFsKG1lc3NhZ2Uuc3VjY2Vzcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgc2hvd1RoYW5rc01vZGFsKG1lc3NhZ2UuZmFpbHVyZSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgICBmb3JtLnJlc2V0KCk7XHJcbiAgICAgICAgICBzcGlubmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgZm9ybXMuZm9yRWFjaCgoZm9ybSkgPT4gcG9zdERhdGEoZm9ybSkpO1xyXG59O1xyXG4iLCJleHBvcnQgY29uc3QgY2FsYyA9ICgpID0+IHtcbiAgY29uc3QgY2FsY0ZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbGN1bGF0aW5nX19maWVsZCcpO1xuICBjb25zdCBpbnB1dHMgPSBjYWxjRmllbGQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKTtcbiAgY29uc3QgcmVzdWx0ID0gY2FsY0ZpZWxkLnF1ZXJ5U2VsZWN0b3IoJy5jYWxjdWxhdGluZ19fcmVzdWx0ID4gc3BhbicpO1xuXG4gIGNvbnN0IHJhdGlvID0geyBsb3c6IDEuMiwgc21hbGw6IDEuMzc1LCBtZWRpdW06IDEuNTUsIGhpZ2g6IDEuNzI1IH07XG4gIGNvbnN0IHJlZyA9IC9eWzEtOV1cXGQqfFxcZCtcXC4oXFxkezEsMn0pJC87XG5cbiAgbGV0IHVzZXIgPSB7IGdlbmRlcjogJ2ZlbWFsZScsIGxldmVsOiAnc21hbGwnIH07XG5cbiAgY29uc3QgZ2V0UmVzdWx0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2VuZGVyLCBoZWlnaHQsIHdlaWdodCwgYWdlLCBsZXZlbCB9ID0gdXNlcjtcblxuICAgIGlmICh3ZWlnaHQgJiYgaGVpZ2h0ICYmIGFnZSAmJiAhY2FsY0ZpZWxkLnF1ZXJ5U2VsZWN0b3IoJy5hdHRlbnRpb24nKSkge1xuICAgICAgZ2VuZGVyID09ICdmZW1hbGUnXG4gICAgICAgID8gKHJlc3VsdC50ZXh0Q29udGVudCA9IE1hdGgucm91bmQoKDQ0Ny42ICsgOS4yICogd2VpZ2h0ICsgMy4xICogaGVpZ2h0IC0gNC4zICogYWdlKSAqIHJhdGlvW2xldmVsXSkpXG4gICAgICAgIDogKHJlc3VsdC50ZXh0Q29udGVudCA9IE1hdGgucm91bmQoKDg4LjM2ICsgMTMuNCAqIHdlaWdodCArIDQuOCAqIGhlaWdodCAtIDUuNyAqIGFnZSkgKiByYXRpb1tsZXZlbF0pKTtcblxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXInLCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XG4gICAgfVxuICB9O1xuXG4gIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcicpKSB7XG4gICAgdXNlciA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKSk7XG4gICAgaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiAoaW5wdXQudmFsdWUgPSB1c2VyW2lucHV0LmlkXSkpO1xuICAgIGdldFJlc3VsdCgpO1xuICB9XG5cbiAgY2FsY0ZpZWxkLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWdlbmRlcj1cIiR7dXNlci5nZW5kZXJ9XCJdYCkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gIGNhbGNGaWVsZC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1sZXZlbD1cIiR7dXNlci5sZXZlbH1cIl1gKS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcblxuICBjYWxjRmllbGQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgIGNvbnN0IGJ0biA9IGUudGFyZ2V0O1xuICAgIGlmIChidG4uZGF0YXNldC5nZW5kZXIgfHwgYnRuLmRhdGFzZXQubGV2ZWwpIHtcbiAgICAgIGJ0bi5kYXRhc2V0LmdlbmRlciA/ICh1c2VyLmdlbmRlciA9IGJ0bi5kYXRhc2V0LmdlbmRlcikgOiAodXNlci5sZXZlbCA9IGJ0bi5kYXRhc2V0LmxldmVsKTtcbiAgICAgIGJ0bi5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUnKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgIGdldFJlc3VsdCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gICAgICBpZiAoaW5wdXQudmFsdWUubWF0Y2gocmVnKSAmJiAraW5wdXQudmFsdWUgPCAzMDApIHtcbiAgICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgnYXR0ZW50aW9uJyk7XG4gICAgICAgIHVzZXJbaW5wdXQuaWRdID0gK2lucHV0LnZhbHVlO1xuICAgICAgICBnZXRSZXN1bHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoJ2F0dGVudGlvbicpO1xuICAgICAgICByZXN1bHQudGV4dENvbnRlbnQgPSAnX19fXyc7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcbiIsImltcG9ydCB7IGZldGNoRGF0YSB9IGZyb20gJy4vc2VydmljZXMnO1xyXG5cclxuY2xhc3MgTWVudUNhcmQge1xyXG4gIGNvbnN0cnVjdG9yKHNyYywgYWx0LCB0aXRsZSwgZGVzY3IsIHByaWNlLCBwYXJlbnRTZWxlY3RvciwgLi4uY2xhc3Nlcykge1xyXG4gICAgdGhpcy5zcmMgPSBzcmM7XHJcbiAgICB0aGlzLmFsdCA9IGFsdDtcclxuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcclxuICAgIHRoaXMuZGVzY3IgPSBkZXNjcjtcclxuICAgIHRoaXMucHJpY2UgPSBwcmljZTtcclxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXJlbnRTZWxlY3Rvcik7XHJcbiAgICB0aGlzLmNsYXNzZXMgPSBjbGFzc2VzO1xyXG4gICAgdGhpcy5yYXRlID0gNzA7XHJcbiAgICB0aGlzLmNoYW5nZVRvUnViKCk7XHJcbiAgfVxyXG5cclxuICBjaGFuZ2VUb1J1YigpIHtcclxuICAgIHRoaXMucHJpY2UgPSArdGhpcy5wcmljZSAqIHRoaXMucmF0ZTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IGNhcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICB0aGlzLmNsYXNzZXMubGVuZ3RoID8gY2FyZC5jbGFzc0xpc3QuYWRkKC4uLnRoaXMuY2xhc3NlcykgOiBjYXJkLmNsYXNzTGlzdC5hZGQoJ21lbnVfX2l0ZW0nKTtcclxuXHJcbiAgICBjYXJkLmlubmVySFRNTCA9IGBcclxuICAgICAgPGltZyBzcmM9JHt0aGlzLnNyY30gYWx0PSR7dGhpcy5hbHR9IC8+XHJcbiAgICAgICAgPGgzIGNsYXNzPVwibWVudV9faXRlbS1zdWJ0aXRsZVwiPiR7dGhpcy50aXRsZX08L2gzPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZW51X19pdGVtLWRlc2NyXCI+JHt0aGlzLmRlc2NyfTwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZW51X19pdGVtLWRpdmlkZXJcIj48L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwibWVudV9faXRlbS1wcmljZVwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1lbnVfX2l0ZW0tY29zdFwiPtCm0LXQvdCwOjwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1lbnVfX2l0ZW0tdG90YWxcIj48c3Bhbj4ke3RoaXMucHJpY2V9PC9zcGFuPiDRgNGD0LEv0LTQtdC90Yw8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIGA7XHJcblxyXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKGNhcmQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNhcmRzID0gKCkgPT4ge1xyXG4gIGZldGNoRGF0YSgnLi9kYi5qc29uJylcclxuICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgIGRhdGEubWVudS5mb3JFYWNoKCh7IGltZywgYWx0aW1nLCB0aXRsZSwgZGVzY3IsIHByaWNlIH0pID0+IHtcclxuICAgICAgICBuZXcgTWVudUNhcmQoaW1nLCBhbHRpbWcsIHRpdGxlLCBkZXNjciwgcHJpY2UsICcubWVudSAuY29udGFpbmVyJykucmVuZGVyKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmVycm9yKGVyci5tZXNzYWdlKSk7XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCB0aW1lciA9ICh0aW1lckVsLCBkZWFkbGluZSwgZW5kRGF5LCBlbmRNb250aCkgPT4ge1xyXG4gIGNvbnN0IHRpbWVCb3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCR7dGltZXJFbH0gc3BhbmApO1xyXG5cclxuICBkZWFkbGluZSA9IG5ldyBEYXRlKGAke2RlYWRsaW5lfVQwMDowMDowMGApO1xyXG5cclxuICBjb25zdCB1cGRhdGVEZWFkbGluZSA9ICgpID0+IHtcclxuICAgIGlmIChkZWFkbGluZSAtIERhdGUubm93KCkgPD0gMCkge1xyXG4gICAgICBjb25zdCBtc2VjUGVyV2VlayA9IDEwMDAgKiA2MCAqIDYwICogMjQgKiA3O1xyXG4gICAgICBjb25zdCBwYXNzZWRUaW1lID0gKERhdGUubm93KCkgLSBkZWFkbGluZSkgJSBtc2VjUGVyV2VlazsgLy8g0L/RgNC+0YjQtdC00YjQtdC1INCy0YDQtdC80Y8g0YEg0L3QsNGH0LDQu9CwINC90L7QstC+0Lkg0L3QtdC00LXQu9C4XHJcbiAgICAgIGRlYWRsaW5lID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIHBhc3NlZFRpbWUgKyBtc2VjUGVyV2Vlayk7IC8vINC00LXQtNC70LDQudC9INC+0LHQvdC+0LLQu9GP0LXRgtGB0Y8g0LrQsNC20LTRg9GOINC90LXQtNC10LvRjiDQvdCwIDEg0L3QtdC00LXQu9GOINCy0L/QtdGA0LXQtFxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHVwZGF0ZURlYWRsaW5lVGV4dCA9ICgpID0+IHtcclxuICAgIGNvbnN0IG1vbnRocyA9IFsn0Y/QvdCy0LDRgNGPJywgJ9GE0LXQstGA0LDQu9GPJywgJ9C80LDRgNGC0LAnLCAn0LDQv9GA0LXQu9GPJywgJ9C80LDRjycsICfQuNGO0L3RjycsICfQuNGO0LvRjycsICfQsNCy0LPRg9GB0YLQsCcsICfRgdC10L3RgtGP0LHRgNGPJywgJ9C+0LrRgtGP0LHRgNGPJywgJ9C90L7Rj9Cx0YDRjycsICfQtNC10LrQsNCx0YDRjyddO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZW5kRGF5KS50ZXh0Q29udGVudCA9IGRlYWRsaW5lLmdldERhdGUoKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZW5kTW9udGgpLnRleHRDb250ZW50ID0gbW9udGhzW2RlYWRsaW5lLmdldE1vbnRoKCldO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGdldFRpbWVSZW1haW5pbmcgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBtc2VjID0gZGVhZGxpbmUgLSBEYXRlLm5vdygpO1xyXG5cclxuICAgIGNvbnN0IGRheXMgPSBNYXRoLmZsb29yKG1zZWMgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xyXG4gICAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKChtc2VjIC8gKDEwMDAgKiA2MCAqIDYwKSkgJSAyNCk7XHJcbiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcigobXNlYyAvICgxMDAwICogNjApKSAlIDYwKTtcclxuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKChtc2VjIC8gMTAwMCkgJSA2MCk7XHJcblxyXG4gICAgcmV0dXJuIG1zZWMgPiAwID8gW2RheXMsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBtc2VjXSA6IFswLCAwLCAwLCAwLCAwXTtcclxuICB9O1xyXG5cclxuICBjb25zdCBub3JtYWxpemVOdW0gPSAobnVtKSA9PiAobnVtIDwgMTAgPyBgMCR7bnVtfWAgOiBudW0pO1xyXG5cclxuICBjb25zdCBub3JtYWxpemVXb3JkID0gKG51bSkgPT4ge1xyXG4gICAgaWYgKG51bSAlIDEwID09PSAxICYmIG51bSAhPT0gMTEpIHtcclxuICAgICAgcmV0dXJuIFsn0LTQtdC90YwnLCAn0YfQsNGBJywgJ9C80LjQvdGD0YLQsCcsICfRgdC10LrRg9C90LTQsCddO1xyXG4gICAgfSBlbHNlIGlmICgobnVtICUgMTAgPT09IDIgJiYgbnVtICE9PSAxMikgfHwgKG51bSAlIDEwID09PSAzICYmIG51bSAhPT0gMTMpIHx8IChudW0gJSAxMCA9PT0gNCAmJiBudW0gIT09IDE0KSkge1xyXG4gICAgICByZXR1cm4gWyfQtNC90Y8nLCAn0YfQsNGB0LAnLCAn0LzQuNC90YPRgtGLJywgJ9GB0LXQutGD0L3QtNGLJ107XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gWyfQtNC90LXQuScsICfRh9Cw0YHQvtCyJywgJ9C80LjQvdGD0YInLCAn0YHQtdC60YPQvdC0J107XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2V0VGltZXIgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB0aW1lcklkID0gc2V0SW50ZXJ2YWwodXBkYXRlVGltZXIsIDEwMDApO1xyXG4gICAgdXBkYXRlVGltZXIoKTtcclxuXHJcbiAgICBmdW5jdGlvbiB1cGRhdGVUaW1lcigpIHtcclxuICAgICAgY29uc3QgdGltZVJlbSA9IGdldFRpbWVSZW1haW5pbmcoKTtcclxuICAgICAgaWYgKHRpbWVSZW1bNF0gPD0gMTAwMCkgY2xlYXJJbnRlcnZhbCh0aW1lcklkKTtcclxuXHJcbiAgICAgIHRpbWVCb3hlcy5mb3JFYWNoKCh0aW1lQm94LCBpKSA9PiB7XHJcbiAgICAgICAgdGltZUJveC50ZXh0Q29udGVudCA9IG5vcm1hbGl6ZU51bSh0aW1lUmVtW2ldKTtcclxuICAgICAgICB0aW1lQm94Lm5leHRTaWJsaW5nLnRleHRDb250ZW50ID0gbm9ybWFsaXplV29yZCh0aW1lUmVtW2ldKVtpXTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdXBkYXRlRGVhZGxpbmUoKTtcclxuICB1cGRhdGVEZWFkbGluZVRleHQoKTtcclxuICBzZXRUaW1lcigpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBjbGVhckxTIH0gZnJvbSAnLi9tb2R1bGVzL3NlcnZpY2VzJztcclxuaW1wb3J0IHsgdGFicyB9IGZyb20gJy4vbW9kdWxlcy90YWJzJztcclxuaW1wb3J0IHsgc2xpZGVyIH0gZnJvbSAnLi9tb2R1bGVzL3NsaWRlcic7XHJcbmltcG9ydCB7IGNvbnRhY3QgfSBmcm9tICcuL21vZHVsZXMvY29udGFjdCc7XHJcbmltcG9ydCB7IGNhbGMgfSBmcm9tICcuL21vZHVsZXMvY2FsYyc7XHJcbmltcG9ydCB7IGNhcmRzIH0gZnJvbSAnLi9tb2R1bGVzL2NhcmRzJztcclxuaW1wb3J0IHsgdGltZXIgfSBmcm9tICcuL21vZHVsZXMvdGltZXInO1xyXG5cclxuY2xlYXJMUygpO1xyXG50YWJzKCcudGFiY29udGVudCcsICcudGFiaGVhZGVyX19pdGVtJyk7XHJcbnNsaWRlcignLm9mZmVyX19zbGlkZXInLCAnLm9mZmVyX19zbGlkZScsICcub2ZmZXJfX3NsaWRlci1wcmV2JywgJy5vZmZlcl9fc2xpZGVyLW5leHQnLCAnI2N1cnJlbnQnLCAnI3RvdGFsJyk7XHJcbmNvbnRhY3QoKTtcclxuY2FsYygpO1xyXG5jYXJkcygpO1xyXG50aW1lcignLnRpbWVyJywgJzIwMjItMDgtMDgnLCAnI2VuZC1kYXknLCAnI2VuZC1tb250aCcpO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///594\n")}},__webpack_exports__={};__webpack_modules__[594]()})();