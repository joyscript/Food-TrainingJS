(()=>{"use strict";var __webpack_modules__={594:()=>{eval("\n;// CONCATENATED MODULE: ./src/modules/services.js\nconst fetchData = async (url, method, data) => {\r\n  let res;\r\n\r\n  if (method == 'POST') {\r\n    res = await fetch(url, {\r\n      method: method,\r\n      body: data,\r\n      headers: { 'Content-type': 'application/json' },\r\n    });\r\n  } else {\r\n    res = await fetch(url);\r\n  }\r\n\r\n  if (!res.ok) throw new Error(`Ошибка запроса по адресу ${url}, статус: ${res.status}`);\r\n\r\n  return await res.json();\r\n};\r\n\r\nconst clearLS = () => {\r\n  if (!localStorage.getItem('user777')) {\r\n    localStorage.clear();\r\n    localStorage.setItem('user777', 'hello!');\r\n  }\r\n};\r\n\n;// CONCATENATED MODULE: ./src/modules/tabs.js\nconst tabs = (content, tab) => {\r\n  const tabcontents = document.querySelectorAll(content);\r\n  const tabs = document.querySelectorAll(tab);\r\n\r\n  const hideContent = () => {\r\n    tabcontents.forEach((content) => content.classList.remove('active', 'fade'));\r\n    tabs.forEach((tab) => tab.classList.remove('active'));\r\n  };\r\n\r\n  const showContent = (i) => {\r\n    tabcontents[i].classList.add('active', 'fade');\r\n    tabs[i].classList.add('active');\r\n  };\r\n\r\n  tabs.forEach((tab, i) => {\r\n    tab.addEventListener('click', () => {\r\n      hideContent();\r\n      showContent(i);\r\n    });\r\n  });\r\n};\r\n\n;// CONCATENATED MODULE: ./src/modules/slider.js\nconst slider = (sliderEl, slide, prevBtn, nextBtn, curSlide, totalSlides) => {\r\n  const slider = document.querySelector(sliderEl);\r\n  const slides = slider.querySelectorAll(slide);\r\n  const btnPrev = slider.querySelector(prevBtn);\r\n  const btnNext = slider.querySelector(nextBtn);\r\n  const current = slider.querySelector(curSlide);\r\n  const total = slider.querySelector(totalSlides);\r\n\r\n  let ind = 0;\r\n\r\n  const normalizeNum = (num) => (num < 10 ? `0${num}` : num);\r\n\r\n  total.textContent = normalizeNum(slides.length);\r\n  current.textContent = normalizeNum(ind + 1);\r\n\r\n  const controls = document.createElement('div');\r\n  controls.classList.add('slider-controls');\r\n  slider.append(controls);\r\n\r\n  for (let i = 0; i < slides.length; i++) {\r\n    const dot = document.createElement('div');\r\n    dot.classList.add('slider-dot');\r\n    if (i == ind) dot.classList.add('active');\r\n    controls.append(dot);\r\n  }\r\n\r\n  const dots = controls.querySelectorAll('.slider-dot');\r\n\r\n  const hideSlide = (direction) => {\r\n    slider.classList.add('lock');\r\n    slides[ind].classList.add(direction);\r\n\r\n    const deactivateSlide = (e) => e.target.classList.remove('active', direction);\r\n    slides[ind].addEventListener('animationend', (e) => deactivateSlide(e), { once: true });\r\n  };\r\n\r\n  const showSlide = (direction) => {\r\n    current.textContent = normalizeNum(ind + 1);\r\n    controls.querySelector('.slider-dot.active').classList.remove('active');\r\n    dots[ind].classList.add('active');\r\n\r\n    slides[ind].classList.add('next', direction);\r\n\r\n    const activateSlide = (e) => {\r\n      e.target.classList.remove('next', direction);\r\n      e.target.classList.add('active');\r\n      slider.classList.remove('lock');\r\n    };\r\n\r\n    slides[ind].addEventListener('animationend', (e) => activateSlide(e), { once: true });\r\n  };\r\n\r\n  const showLeftSlide = (i) => {\r\n    hideSlide('to-right');\r\n    i || i == 0 ? (ind = i) : (ind = (ind - 1 + slides.length) % slides.length);\r\n    showSlide('from-left');\r\n  };\r\n\r\n  const showRightSlide = (i) => {\r\n    hideSlide('to-left');\r\n    i || i == 0 ? (ind = i) : (ind = (ind + 1) % slides.length);\r\n    showSlide('from-right');\r\n  };\r\n\r\n  btnPrev.addEventListener('click', () => showLeftSlide());\r\n  btnNext.addEventListener('click', () => showRightSlide());\r\n\r\n  dots.forEach((dot, i) => {\r\n    dot.addEventListener('click', () => (i < ind ? showLeftSlide(i) : showRightSlide(i)));\r\n  });\r\n\r\n  let sliderTimerId = setInterval(() => showRightSlide(), 2500);\r\n\r\n  slider.addEventListener('pointerover', () => clearInterval(sliderTimerId));\r\n  slider.addEventListener('pointerout', () => (sliderTimerId = setInterval(() => showRightSlide(), 2500)));\r\n\r\n  // ----------------------------------------------------\r\n\r\n  const swipeSlides = () => {\r\n    const surface = slider.querySelector('.offer__slider-wrapper');\r\n\r\n    let startX, startY, distX, distY, startTime, elapsedTime;\r\n    const minDistX = 50;\r\n    const maxDistY = 100;\r\n    const maxTime = 300;\r\n\r\n    const startActions = (e) => {\r\n      if (e.type == 'mousedown') e.preventDefault();\r\n      if (e.type == 'touchstart') e = e.changedTouches[0];\r\n\r\n      startX = e.pageX;\r\n      startY = e.pageY;\r\n      startTime = new Date().getTime();\r\n    };\r\n\r\n    const endActions = (e) => {\r\n      if (e.type == 'mouseup') e.preventDefault();\r\n      if (e.type == 'touchend') e = e.changedTouches[0];\r\n\r\n      distX = e.pageX - startX;\r\n      distY = e.pageY - startY;\r\n      elapsedTime = new Date().getTime() - startTime;\r\n\r\n      if (elapsedTime <= maxTime && Math.abs(distX) >= minDistX && Math.abs(distY) <= maxDistY) {\r\n        distX > 0 ? showLeftSlide() : showRightSlide();\r\n      }\r\n    };\r\n\r\n    surface.addEventListener('mousedown', (e) => startActions(e));\r\n    surface.addEventListener('mouseup', (e) => endActions(e));\r\n\r\n    surface.addEventListener('touchstart', (e) => startActions(e));\r\n    surface.addEventListener('touchend', (e) => endActions(e));\r\n  };\r\n\r\n  swipeSlides();\r\n};\r\n\n;// CONCATENATED MODULE: ./src/modules/Modal.js\nconst scrollBar = window.innerWidth - document.documentElement.offsetWidth;\r\n\r\nclass Modal {\r\n  constructor(modal, closeBtn, openBtns) {\r\n    this.modal = document.querySelector(modal);\r\n    this.closeBtn = document.querySelector(closeBtn);\r\n    this.openBtns = document.querySelectorAll(openBtns);\r\n    this.openTimeout;\r\n    this.closeTimeout;\r\n    this.modalHandlers();\r\n  }\r\n\r\n  openModal() {\r\n    this.modal.classList.add('active');\r\n    document.body.style.cssText = `overflow: hidden; padding-right: ${scrollBar}px`;\r\n    if (this.closeTimeout) this.closeTimeout();\r\n    if (this.openTimeout) clearTimeout(this.openTimeout);\r\n  }\r\n\r\n  closeModal() {\r\n    this.modal.classList.remove('active');\r\n    document.body.style = '';\r\n    if (this.closeTimeout) clearTimeout(this.closeTimeout);\r\n  }\r\n\r\n  modalHandlers() {\r\n    this.openBtns.forEach((btn) => btn.addEventListener('click', () => this.openModal()));\r\n\r\n    this.modal.addEventListener('click', (e) => {\r\n      if (e.target === this.modal || e.target === this.closeBtn) this.closeModal();\r\n    });\r\n\r\n    document.addEventListener('keydown', (e) => {\r\n      if (e.code === 'Escape' && this.modal.classList.contains('active')) this.closeModal();\r\n    });\r\n  }\r\n\r\n  scrollHandler() {\r\n    const openModalOnScroll = () => {\r\n      if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight) this.openModal();\r\n    };\r\n    window.addEventListener('scroll', openModalOnScroll, { once: true });\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/modules/contact.js\n\r\n\r\n\r\nconst contact = () => {\r\n  const modal = new Modal('.modal', '.modal__close', '[data-modal]');\r\n  modal.openTimeout = setTimeout(() => modal.openModal(), 5000);\r\n  modal.scrollHandler();\r\n\r\n  const thanksModal = new Modal('.thanks-modal', '.modal__close');\r\n  thanksModal.closeTimeout = () => setTimeout(() => thanksModal.closeModal(), 3000);\r\n\r\n  const forms = document.querySelectorAll('form');\r\n\r\n  const message = {\r\n    success: 'Спасибо! Мы скоро с вами свяжемся',\r\n    failure: 'Что-то пошло не так...',\r\n  };\r\n\r\n  const checkData = (form) => {\r\n    const checkInput = (input, reg) => {\r\n      input.value.match(reg) ? input.classList.remove('attention') : input.classList.add('attention');\r\n    };\r\n\r\n    form.addEventListener('input', (e) => {\r\n      if (e.target.getAttribute('name') == 'name') checkInput(e.target, /^([A-Za-zА-Яа-я]+\\s?)[A-Za-zА-Яа-я]*$/);\r\n      if (e.target.getAttribute('name') == 'phone') checkInput(e.target, /^[\\d-]+$/);\r\n    });\r\n  };\r\n\r\n  const showThanksModal = (message) => {\r\n    modal.closeModal();\r\n    thanksModal.modal.querySelector('.modal__title').textContent = message;\r\n    thanksModal.openModal();\r\n  };\r\n\r\n  const postData = (form) => {\r\n    form.addEventListener('submit', (e) => {\r\n      e.preventDefault();\r\n\r\n      if (!form.querySelector('.attention')) {\r\n        const spinner = form.querySelector('.spinner');\r\n        spinner.classList.add('active');\r\n\r\n        const formData = new FormData(form);\r\n        const jsonData = JSON.stringify(Object.fromEntries(formData.entries()));\r\n\r\n        fetchData('https://jsonplaceholder.typicode.com/posts', 'POST', jsonData)\r\n          .then((data) => {\r\n            console.log(data);\r\n            showThanksModal(message.success);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err.message);\r\n            showThanksModal(message.failure);\r\n          })\r\n          .finally(() => {\r\n            form.reset();\r\n            spinner.classList.remove('active');\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  forms.forEach((form) => {\r\n    checkData(form);\r\n    postData(form);\r\n  });\r\n};\r\n\n;// CONCATENATED MODULE: ./src/modules/calc.js\nconst calc = () => {\n  const calcField = document.querySelector('.calculating__field');\n  const inputs = calcField.querySelectorAll('input');\n  const result = calcField.querySelector('.calculating__result > span');\n\n  const ratio = { low: 1.2, small: 1.375, medium: 1.55, high: 1.725 };\n  const reg = /^[1-9]\\d*|\\d+\\.(\\d{1,2})$/;\n\n  let user = { gender: 'female', level: 'small' };\n\n  const getResult = () => {\n    const { gender, height, weight, age, level } = user;\n\n    if (weight && height && age && !calcField.querySelector('.attention')) {\n      gender == 'female'\n        ? (result.textContent = Math.round((447.6 + 9.2 * weight + 3.1 * height - 4.3 * age) * ratio[level]))\n        : (result.textContent = Math.round((88.36 + 13.4 * weight + 4.8 * height - 5.7 * age) * ratio[level]));\n\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n  };\n\n  if (localStorage.getItem('user')) {\n    user = JSON.parse(localStorage.getItem('user'));\n    inputs.forEach((input) => (input.value = user[input.id]));\n    getResult();\n  }\n\n  calcField.querySelector(`[data-gender=\"${user.gender}\"]`).classList.add('active');\n  calcField.querySelector(`[data-level=\"${user.level}\"]`).classList.add('active');\n\n  calcField.addEventListener('click', (e) => {\n    const btn = e.target;\n    if (btn.dataset.gender || btn.dataset.level) {\n      btn.dataset.gender ? (user.gender = btn.dataset.gender) : (user.level = btn.dataset.level);\n      btn.parentElement.querySelector('.active').classList.remove('active');\n      btn.classList.add('active');\n      getResult();\n    }\n  });\n\n  inputs.forEach((input) => {\n    input.addEventListener('input', () => {\n      if (input.value.match(reg) && +input.value < 300) {\n        input.classList.remove('attention');\n        user[input.id] = +input.value;\n        getResult();\n      } else {\n        input.classList.add('attention');\n        result.textContent = '____';\n      }\n    });\n  });\n};\n\n;// CONCATENATED MODULE: ./src/modules/cards.js\n\r\n\r\nclass MenuCard {\r\n  constructor(src, alt, title, descr, price, parentSelector, ...classes) {\r\n    this.src = src;\r\n    this.alt = alt;\r\n    this.title = title;\r\n    this.descr = descr;\r\n    this.price = price;\r\n    this.container = document.querySelector(parentSelector);\r\n    this.classes = classes;\r\n    this.rate = 70;\r\n    this.changeToRub();\r\n  }\r\n\r\n  changeToRub() {\r\n    this.price = +this.price * this.rate;\r\n  }\r\n\r\n  render() {\r\n    const card = document.createElement('div');\r\n\r\n    this.classes.length ? card.classList.add(...this.classes) : card.classList.add('menu__item');\r\n\r\n    card.innerHTML = `\r\n      <img src=${this.src} alt=${this.alt} />\r\n        <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n        <div class=\"menu__item-descr\">${this.descr}</div>\r\n        <div class=\"menu__item-divider\"></div>\r\n        <div class=\"menu__item-price\">\r\n          <div class=\"menu__item-cost\">Цена:</div>\r\n          <div class=\"menu__item-total\"><span>${this.price}</span> руб/день</div>\r\n        </div>\r\n    `;\r\n\r\n    this.container.append(card);\r\n  }\r\n}\r\n\r\nconst cards = () => {\r\n  fetchData('./db.json')\r\n    .then((data) => {\r\n      data.menu.forEach(({ img, altimg, title, descr, price }) => {\r\n        new MenuCard(img, altimg, title, descr, price, '.menu .container').render();\r\n      });\r\n    })\r\n    .catch((err) => console.error(err.message));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/modules/timer.js\nconst timer = (timerEl, deadline, endDay, endMonth) => {\r\n  const timeBoxes = document.querySelectorAll(`${timerEl} span`);\r\n\r\n  deadline = new Date(`${deadline}T00:00:00`);\r\n\r\n  const updateDeadline = () => {\r\n    if (deadline - Date.now() <= 0) {\r\n      const msecPerWeek = 1000 * 60 * 60 * 24 * 7;\r\n      const passedTime = (Date.now() - deadline) % msecPerWeek; // прошедшее время с начала новой недели\r\n      deadline = new Date(Date.now() - passedTime + msecPerWeek); // дедлайн обновляется каждую неделю на 1 неделю вперед\r\n    }\r\n  };\r\n\r\n  const updateDeadlineText = () => {\r\n    const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];\r\n\r\n    document.querySelector(endDay).textContent = deadline.getDate();\r\n    document.querySelector(endMonth).textContent = months[deadline.getMonth()];\r\n  };\r\n\r\n  const getTimeRemaining = () => {\r\n    const msec = deadline - Date.now();\r\n\r\n    const days = Math.floor(msec / (1000 * 60 * 60 * 24));\r\n    const hours = Math.floor((msec / (1000 * 60 * 60)) % 24);\r\n    const minutes = Math.floor((msec / (1000 * 60)) % 60);\r\n    const seconds = Math.floor((msec / 1000) % 60);\r\n\r\n    return msec > 0 ? [days, hours, minutes, seconds, msec] : [0, 0, 0, 0, 0];\r\n  };\r\n\r\n  const normalizeNum = (num) => (num < 10 ? `0${num}` : num);\r\n\r\n  const normalizeWord = (num) => {\r\n    if (num % 10 === 1 && num !== 11) {\r\n      return ['день', 'час', 'минута', 'секунда'];\r\n    } else if ((num % 10 === 2 && num !== 12) || (num % 10 === 3 && num !== 13) || (num % 10 === 4 && num !== 14)) {\r\n      return ['дня', 'часа', 'минуты', 'секунды'];\r\n    } else {\r\n      return ['дней', 'часов', 'минут', 'секунд'];\r\n    }\r\n  };\r\n\r\n  const setTimer = () => {\r\n    const timerId = setInterval(updateTimer, 1000);\r\n    updateTimer();\r\n\r\n    function updateTimer() {\r\n      const timeRem = getTimeRemaining();\r\n      if (timeRem[4] <= 1000) clearInterval(timerId);\r\n\r\n      timeBoxes.forEach((timeBox, i) => {\r\n        timeBox.textContent = normalizeNum(timeRem[i]);\r\n        timeBox.nextSibling.textContent = normalizeWord(timeRem[i])[i];\r\n      });\r\n    }\r\n  };\r\n\r\n  updateDeadline();\r\n  updateDeadlineText();\r\n  setTimer();\r\n};\r\n\n;// CONCATENATED MODULE: ./src/index.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclearLS();\r\ntabs('.tabcontent', '.tabheader__item');\r\nslider('.offer__slider', '.offer__slide', '.offer__slider-prev', '.offer__slider-next', '#current', '#total');\r\ncontact();\r\ncalc();\r\ncards();\r\ntimer('.timer', '2022-08-08', '#end-day', '#end-month');\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///594\n")}},__webpack_exports__={};__webpack_modules__[594]()})();